from decimal import Decimal, ROUND_CEILING, InvalidOperation
from datetime import datetime
from telebot import types
from telebot_calendar import Calendar, CallbackData, RUSSIAN_LANGUAGE
from bot_config import TELEGRAM_TOKEN
import json
import re
import math
import requests
import telebot
import logging

class FutureDateError(Exception):
	def __init__(self, date, message="Future Date Error!"):
		self.date = date
		self.message = message
		super().__init__(self.message)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logging.info("Ready Steady Go!")

user_sessions = {}
currency_cache = {}
months_ru = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
    5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
    9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
}

bot = telebot.TeleBot(TELEGRAM_TOKEN)

calendar = Calendar(language=RUSSIAN_LANGUAGE)
calendar_callback = CallbackData("calendar", "action", "year", "month", "day")

def send_currency_keyboard(chat_id, text='–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É'):
	markup = types.InlineKeyboardMarkup()
	usd_button = types.InlineKeyboardButton('USD üíµ', callback_data='USD')
	eur_button = types.InlineKeyboardButton('EUR üí∂', callback_data='EUR')
	markup.add(usd_button, eur_button)
	bot.send_message(chat_id, text, reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(message):
	bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É')
	send_currency_keyboard(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã.')


@bot.callback_query_handler(func=lambda call: call.data in ['USD', 'EUR'])
def handle_currency_call(call):
	chosen_currency = call.data
	chat_id = call.message.chat.id
	if chat_id not in user_sessions:
		user_sessions[chat_id] = {'chosen_currency': chosen_currency}
	else:
		user_sessions[chat_id]['chosen_currency'] = chosen_currency
	bot.answer_callback_query(call.id)
	msg = bot.send_message(chat_id, f'–ù–∞–ø–∏—à–∏ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ –≤ {chosen_currency}')
	bot.register_next_step_handler(msg, get_amount)


@bot.callback_query_handler(func=lambda call: call.data.startswith(calendar_callback.prefix))
def callback_inline(call: types.CallbackQuery):
	name, action, year, month, day = call.data.split(calendar_callback.sep)
	date_obj = calendar.calendar_query_handler(
		bot=bot,
		call=call,
		name=name,
		action=action,
		year=year,
		month=month,
		day=day
	)
	try:
		if action == "DAY":
			message = call.message
			chat_id = message.chat.id
			today = datetime.now().date()
			if date_obj.date() > today:
				raise FutureDateError("–í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.")
			date_str = date_obj.strftime('%Y-%m-%d')
			if chat_id not in user_sessions:
				user_sessions[chat_id] = {'date_str': date_str}
			else:
				user_sessions[chat_id]['date_str'] = date_str
			calculate_gel_summ(message)
		elif action == "CANCEL":
			bot.send_message(call.from_user.id, "–í—ã–±–æ—Ä –¥–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω")
			start(call.message)
			return
	except FutureDateError as fde:
		logging.error(f"–û—à–∏–±–∫–∞: {fde} –ë—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ {message.text}")
		bot.send_message(chat_id, '–ë—É–¥—É—â–µ–µ –Ω–µ –Ω–∞–ø–∏—Å–∞–Ω–æ, –µ–≥–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å. –í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.')
		send_calendar(call.message)


def get_amount(message):
	chat_id = message.chat.id
	try:
		message_text_normalized = message.text.replace(',', '.')
		if math.isinf(float(message_text_normalized)):
			raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å—é")
		amount = Decimal(message_text_normalized)
		if chat_id not in user_sessions:
			user_sessions[chat_id] = {'amount': amount}
		else:
			user_sessions[chat_id]['amount'] = amount
		send_calendar(message)
	except (ValueError, InvalidOperation) as e:
		logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Å—É–º–º—ã: {e}. –í–º–µ—Å—Ç–æ —Å—É–º–º—ã –≤–≤–µ–ª–∏ —ç—Ç–æ: {message.text}")
		msg = bot.send_message(chat_id, f'–ò—Å–ø–æ–ª—å–∑—É–π _—Ü–∏—Ñ—Ä—ã_, –Ω–∞–ø—Ä–∏–º–µ—Ä _123.45_', parse_mode='Markdown')
		bot.register_next_step_handler(msg, get_amount)


def send_calendar(message):
    chat_id = message.chat.id
    now = datetime.now()
    markup = calendar.create_calendar(
        name=calendar_callback.prefix,
        year=now.year,
        month=now.month
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=markup)


def calculate_gel_summ(message):
	chat_id = message.chat.id
	if chat_id in user_sessions:
		amount = user_sessions[chat_id]['amount']
		date_str = user_sessions[chat_id]['date_str']
		chosen_currency = user_sessions[chat_id]['chosen_currency']
	currency_rate = request_currency_rate(date_str, chosen_currency)
	if currency_rate is None:
		bot.send_message(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç. –°–∫–æ—Ä–æ –≤—Å—ë –ø–æ—á–∏–Ω–∏–º!')
	else:
		date_obj = datetime.strptime(date_str, "%Y-%m-%d")
		final_summ_lari = currency_rate*amount
		rounded_final_summ_lari = final_summ_lari.quantize(Decimal("1.00"), rounding=ROUND_CEILING)
		local_date = f'{date_obj.day} {months_ru[date_obj.month]} {date_obj.year}'
		bot.send_message(message.chat.id, f'‚Ä¢ –ö—É—Ä—Å {chosen_currency} –Ω–∞ {local_date} —Å–æ—Å—Ç–∞–≤–ª—è–ª {currency_rate} \n‚Ä¢ –°—É–º–º–∞ –¥–æ—Ö–æ–¥–∞ –≤ –ª–∞—Ä–∏ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ *{rounded_final_summ_lari}*', parse_mode='Markdown')
		send_currency_keyboard(message.chat.id, '–•–æ—á–µ—à—å –ø–æ—Å—á–∏—Ç–∞—Ç—å –¥–ª—è –¥—Ä—É–≥–æ–π –¥–∞—Ç—ã –∏–ª–∏ —Å—É–º–º—ã? –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É.')
		logging.info(f'–†–∞–∑–º–µ—Ä user_sessions: {len(user_sessions)}, —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞: {len(currency_cache)}')


def request_currency_rate(date, chosen_currency):
	cache_key = f"{chosen_currency}_{date}"
	if cache_key in currency_cache:
		return currency_cache[cache_key]

	url = f"https://nbg.gov.ge/gw/api/ct/monetarypolicy/currencies/ka/json/?date={date}" #–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ë–∞–Ω–∫ –ì—Ä—É–∑–∏–∏
	try:
		response = requests.get(url)
		if response.status_code == 200:
			data = response.json()
			currency_rate = parse_json_for_currency(data, chosen_currency)
			if currency_rate is None:
				return None
			currency_cache[cache_key] = currency_rate
			return currency_rate
		else:
			logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: HTTP —Å—Ç–∞—Ç—É—Å {response.status_code}")
			return None
	except requests.RequestException as e:
		logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}, URL: {url}")
		return None


def parse_json_for_currency(data, chosen_currency):
	if data and isinstance(data, list) and data[0].get('currencies'):
		for currency in data[0]['currencies']:
			if currency['code'] == chosen_currency:
				try:
					currency_rate = Decimal(str(currency['rate']))
					return currency_rate
				except InvalidOperation:
					logging.error(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã {chosen_currency} –≤ Decimal.")
					return None
	logging.error("–î–∞–Ω–Ω—ã–µ –æ—Ç API –ø—Ä–∏—à–ª–∏ –≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
	return None

bot.infinity_polling()